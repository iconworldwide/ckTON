type Account = record { owner : principal; subaccount : opt blob };
type AdminSetup = record {
  ckton_transfer_fee : opt nat64;
  indexer_canister : principal;
  ledger_canister : principal;
  ton_fee : opt nat64;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : record { text; nat64 }; Err : text };
type TransformArgs = record { context : blob; response : HttpResponse };
service : () -> {
  admin_mint_wallet_deploy : () -> (Result);
  admin_setup : (AdminSetup) -> (Result);
  deploy_ton_wallet : (opt blob, opt nat32) -> (Result_1);
  destroy_ton_wallet : (text, opt blob, opt nat32) -> (Result_1);
  export_candid : () -> (text) query;
  generate_ton_address : (opt principal, opt blob) -> (text);
  get_deposit_address : (opt principal) -> (text) query;
  get_ton_wallet_address : (opt principal, opt blob) -> (opt text) query;
  http_transform : (TransformArgs) -> (HttpResponse) query;
  ledger_id : () -> (text) query;
  mint : (text, nat64, opt blob, opt nat32) -> (Result_1);
  minter_ton_address : () -> (text) query;
  wallet_balance : (text) -> (nat64);
  wallet_count : () -> (nat64) query;
  wallet_deployed : (Account) -> (bool) query;
  withdraw_native : (text, nat64) -> (Result_2);
}
